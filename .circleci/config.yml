version: 2.1
commands:
    destroy_environment:
        steps:
            - run:
                name: Destroy environment
                when: on_fail
                command: |
                    aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7}

jobs:
    create_infrastructure:
        docker:
            - image: amazon/aws-cli
        steps:
           - checkout
           - run:
               name: Create Cloudformation Stack
               command: |
                   aws cloudformation deploy \
                   --template-file template.yml \
                   --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7} \
                   --region us-east-1
           - run: 
               command: return 1
           - destroy_environment

    configure_infrastructure:
        docker:
            - image: python:3.7-alpine3.11
        steps:
            - checkout
            - add_ssh_keys:
                fingerprints: ["99:ba:85:9f:fa:7b:e0:21:f4:ce:15:a2:38:1c:83:df"]
            
            - run:
                name: Install Ansible
                command: |
                    apk add --update ansible
            - run:
                name: Run Playbook and Configure server
                command: |
                    ansible-playbook -i inventory main-remote.yml
    smoke_test:
        docker:
            - image: alpine:latest
        steps:
            - run: apk add --update curl
            - run:
                name: smoke test
                command: |
                    URL="https://blog.udacity.com/"
                    if curl -s --head ${URL}
                    then
                        return 0
                    else
                        return 1
                    fi
    
    create_and_deploy_front_end:
        docker:
            - image: amazon/aws-cli
        steps:
            - checkout
            - run:
                name: Execute bucket.yml - Create Cloudformation Stack
                command: |
                    aws cloudformation deploy \ 
                    --template-file bucket.yml \ 
                    --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
                    --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"
            #- run: aws s3 sync . s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7} --delete

    get_last_deployment_id:
        docker:
            - image: amazon/aws-cli
        steps:
            - checkout
            - run: yum install -y tar gzip
            - run:
                name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
                command: |
                    aws cloudformation \ 
                    list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
                    --no-paginate --output text > ~/textfile.txt
            - persist_to_workspace:
                root: ~/
                paths:
                    - textfile.txt
    

    promote_to_production:
        docker:
            - image: amazon/aws-cli
        steps:
            - checkout
            - run:
                name: Execute cloudfront.yml
                command: |
                    aws cloudformation deploy \
                    --stack-name production-distro \
                    --parameter-overrides PipelineID="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"

    clean_up_old_front_end:
        docker:
            - image: amazon/aws-cli
        steps:
            - checkout
            - run: yum install -y tar gzip
            - attach_workspace:
                at: ~/
            - run:
                name: Destroy the previous S3 bucket and CloudFormation stack.
                command: |
                    export OldBucketID=$(cat ~/textfile.txt)
                    aws s3 rm "s3://${OldBucketID}" --recursive
        

workflows:
    my_workflow:
        jobs:
            - create_and_deploy_front_end
            - promote_to_production:
                requires:
                    - create_and_deploy_front_end
            - get_last_deployment_id
            - clean_up_old_front_end:
                requires:
                    - get_last_deployment_id
                    - promote_to_production  


            #- configure_infrastructure
            #- smoke_test
